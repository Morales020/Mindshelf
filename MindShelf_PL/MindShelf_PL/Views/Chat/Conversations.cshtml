@model IEnumerable<MindShelf_PL.Controllers.ChatController.ConversationVm>
@{
    ViewData["Title"] = "مراسلاتي";
}

<style>
    .conv-item{transition:background .2s ease}
    .conv-item:hover{background:rgba(13,110,253,.06)}
    body.dark-mode .conv-item{background:#1b1f26;border-color:#2a2d33;color:#e6e8eb}
    body.dark-mode .conv-item:hover{background:#222732}
    .conv-time{font-size:.78rem;color:#8a94a6}
    body.dark-mode .conv-time{color:#97a3b6}
    .conv-list{border-radius:12px; overflow:hidden}
    body.dark-mode .conv-list{box-shadow:0 2px 10px rgba(0,0,0,.35)}
</style>

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h2 class="mb-0"><i class="fas fa-inbox"></i> مراسلاتي</h2>
        <div>
            <a class="btn btn-outline-secondary me-2" href="@Url.Action("Index","Community")"><i class="fas fa-arrow-right"></i> رجوع</a>
        </div>
    </div>

    <div class="list-group shadow-sm conv-list" id="convList">
        @foreach (var c in Model)
        {
            var name = c.DisplayName ?? c.OtherUserId;
            var when = DateTime.SpecifyKind(c.LastMessageAt, DateTimeKind.Utc).ToLocalTime();
            <a class="list-group-item list-group-item-action d-flex align-items-center justify-content-between conv-item" data-user="@c.OtherUserId" href="@Url.Action("Private","Chat", new { userId = c.OtherUserId })">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrWhiteSpace(c.AvatarUrl))
                    {
                        <img src="@c.AvatarUrl" class="rounded-circle me-3" style="width:40px;height:40px;object-fit:cover;" onerror="this.replaceWith(document.createElement('i'))" />
                    }
                    else
                    {
                        <i class="fas fa-user-circle me-3" style="font-size:40px;"></i>
                    }
                    <div>
                        <div class="fw-bold">@name</div>
                        <div class="conv-time">@when</div>
                    </div>
                </div>
                <span class="badge bg-danger rounded-pill conv-unread" style="@(c.UnreadCount>0?"":"display:none")">@c.UnreadCount</span>
            </a>
        }
    </div>

    @section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const list = document.getElementById('convList');
        function setUnread(userId, delta){
            const item = list.querySelector(`[data-user="${userId}"]`);
            if(!item) return;
            const badge = item.querySelector('.conv-unread');
            let n = parseInt(badge?.textContent||'0')||0;
            n = Math.max(0, n + delta);
            if(badge){
                if(n>0){ badge.style.display='inline-block'; badge.textContent = String(n); }
                else { badge.style.display='none'; badge.textContent='0'; }
            }
            // Move item to top on activity
            list.prepend(item);
            // Update time text to now
            const timeEl = item.querySelector('.conv-time');
            if(timeEl){ timeEl.textContent = new Date().toLocaleString(); }
        }

        const conn = new signalR.HubConnectionBuilder().withUrl('/privateChatHub').withAutomaticReconnect().build();
        conn.on('ReceivePrivateMessage', (senderId, senderName, message, time, avatar, msgId) => {
            // increment unread for that sender
            setUnread(senderId, 1);
        });
        conn.on('ReceivePrivateMessageEcho', (toUserId, message, time, msgId) => {
            // activity moves conversation to top but does not change unread
            setUnread(toUserId, 0);
        });
        conn.start();
    </script>
    }
</div>


