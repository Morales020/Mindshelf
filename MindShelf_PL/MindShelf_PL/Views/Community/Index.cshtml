@model IEnumerable<MindShelf_DAL.Models.Message>

<style>
	:root {
		--msg-incoming-bg: #f5f7fb;
		--msg-incoming-border: #e3e9f4;
		--msg-outgoing-bg: #d7efff;
		--msg-outgoing-border: #bfe6ff;
		--msg-shadow: 0 2px 6px rgba(20,25,38,.06);
	}

	.chat-box{min-height:320px;max-height:64vh;overflow-y:auto;border:1px solid var(--bs-border-color);border-radius:14px;background:var(--bs-body-bg);padding:8px}
	.msg{display:flex;gap:.6rem;margin:.65rem .5rem;align-items:flex-end}
	.msg .avatar{width:36px;height:36px;border-radius:50%;background:#e9ecef;display:flex;align-items:center;justify-content:center;font-weight:700;color:#6c757d;flex:0 0 36px;box-shadow: var(--msg-shadow)}
	.msg .body{max-width:72%;}
	.msg .bubble{position:relative;background:var(--msg-incoming-bg);border:1px solid var(--msg-incoming-border);border-radius:14px 14px 14px 6px;padding:.5rem .7rem;box-shadow: var(--msg-shadow)}
	.msg .name{font-weight:700;font-size:.9rem;margin-bottom:.15rem}
	.msg .text{white-space:pre-wrap}
	.msg .meta{font-size:.73rem;color:#8a94a6;margin:.25rem .2rem 0}

	/* Outgoing (me) */
	.msg.me{flex-direction:row-reverse}
	.msg.me .body{align-items:flex-end;text-align:right}
	.msg.me .bubble{background:var(--msg-outgoing-bg);border-color:var(--msg-outgoing-border);border-radius:14px 14px 6px 14px}

	/* Bubble tails */
	.msg .bubble:after{content:"";position:absolute;left:-6px;bottom:6px;border-width:6px 6px 0 0;border-style:solid;border-color:var(--msg-incoming-border) transparent transparent transparent;}
	.msg .bubble:before{content:"";position:absolute;left:-5px;bottom:7px;border-width:5px 5px 0 0;border-style:solid;border-color:var(--msg-incoming-bg) transparent transparent transparent;}
	.msg.me .bubble:after{left:auto;right:-6px;border-width:6px 0 0 6px;border-color:var(--msg-outgoing-border) transparent transparent var(--msg-outgoing-border);}
	.msg.me .bubble:before{left:auto;right:-5px;border-width:5px 0 0 5px;border-color:var(--msg-outgoing-bg) transparent transparent var(--msg-outgoing-bg);}

	/* Hover */
	.msg .bubble:hover{filter:brightness(0.98)}

	/* Dark mode overrides */
	body.dark-mode .chat-box{background:#121417;border-color:#2a2d33}
	body.dark-mode .msg .avatar{background:#2a2d33;color:#9aa4b2}
	body.dark-mode .msg .bubble{background:#1b1f26;border-color:#2a2d33;color:#e6e8eb}
	body.dark-mode .msg.me .bubble{background:#103245;border-color:#1a3a4c}
	body.dark-mode .meta{color:#97a3b6}
	body.dark-mode .bubble:before{border-color:#1b1f26 transparent transparent transparent}
	body.dark-mode .bubble:after{border-color:#2a2d33 transparent transparent transparent}
	body.dark-mode .msg.me .bubble:before{border-color:#103245 transparent transparent #103245}
	body.dark-mode .msg.me .bubble:after{border-color:#1a3a4c transparent transparent #1a3a4c}

	.composer{position:sticky;bottom:0;background:var(--bs-body-bg);padding-top:.6rem}
</style>

<div class="container py-4">
	<h2 class="mb-3"><i class="fas fa-comments"></i> دردشة المجتمع</h2>

	<div id="messagesList" class="chat-box">
		@{
			var myId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
			var avatars = ViewBag.Avatars as IDictionary<string, string>;
		}
		@foreach (var msg in Model)
		{
			var me = msg.SenderId == myId;
			var avatarUrl = (avatars != null && msg.SenderId != null && avatars.ContainsKey(msg.SenderId)) ? avatars[msg.SenderId] : null;
			var raw = msg.SenderName;
			var shown = (!string.IsNullOrEmpty(raw) && raw.Contains("@")) ? raw.Split('@')[0] : raw;
			<div class="msg @(me ? "me" : "")">
				<a class="avatar text-decoration-none" href="@Url.Action("Public","Account", new { userId = msg.SenderId })" title="عرض الملف">
					@if (!string.IsNullOrWhiteSpace(avatarUrl))
					{
						<img src="@avatarUrl" class="w-100 h-100 rounded-circle" style="object-fit:cover;" onerror="this.parentElement.textContent='@((string.IsNullOrEmpty(shown) ? "?" : shown[0].ToString()))'" />
					}
					else
					{
						@((string.IsNullOrEmpty(shown) ? "?" : shown[0].ToString()))
					}
				</a>
				<div class="body">
					<div class="bubble">
						<div class="name">@shown</div>
						<div class="text">@msg.Content</div>
					</div>
					<div class="meta">@msg.SentAt.ToLocalTime()</div>
				</div>
			</div>
		}
	</div>

	<div class="composer">
		<div class="input-group mt-2">
			<input type="text" id="messageInput" class="form-control" placeholder="اكتب رسالة..." autocomplete="off" />
			<button class="btn btn-primary" id="sendBtn"><i class="fas fa-paper-plane"></i> إرسال</button>
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
	<script>
		const box=document.getElementById('messagesList');
		function scrollBottom(){ box.scrollTop=box.scrollHeight; }
		scrollBottom();

		const sendBtn = document.getElementById('sendBtn');
		sendBtn.disabled = true;

		const myId = '@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)';
		const avatarMap = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Avatars));

		const connection=new signalR.HubConnectionBuilder()
			.withUrl('/communityHub')
			.withAutomaticReconnect()
			.build();
		connection.on('ReceiveMessage',(senderId,user,message,time,avatar)=>{
			const row=document.createElement('div');
			row.className='msg'+(senderId===myId?' me':'');
			const av=document.createElement('a'); av.className='avatar text-decoration-none'; av.href=`/Account/Public?userId=${encodeURIComponent(senderId||'')}`; av.title='عرض الملف';
			const shown = (user && user.includes('@@')) ? user.split('@@')[0] : user;
			const a = avatar || (avatarMap && senderId ? avatarMap[senderId] : null);
			if(a){ const img=document.createElement('img'); img.src=a; img.className='w-100 h-100 rounded-circle'; img.style.objectFit='cover'; img.onerror=()=>{ av.textContent=(shown||'?')[0]; }; av.appendChild(img);} else { av.textContent=(shown||'?')[0]; }
			const body=document.createElement('div'); body.className='body';
			const bubble=document.createElement('div'); bubble.className='bubble'; bubble.innerHTML=`<div class="name">${shown}</div><div class="text">${message}</div>`;
			const meta=document.createElement('div'); meta.className='meta'; meta.textContent=new Date(time).toLocaleString();
			body.appendChild(bubble); body.appendChild(meta); row.appendChild(av); row.appendChild(body); box.appendChild(row); scrollBottom();
		});

		connection.start()
			.then(()=>{ console.log('SignalR connected'); sendBtn.disabled=false; })
			.catch(err=>{ console.error('SignalR start error:', err.toString()); sendBtn.disabled=false; });

		document.getElementById('sendBtn').addEventListener('click',sendMessage);
		document.getElementById('messageInput').addEventListener('keypress',function(e){ if(e.key==='Enter') sendMessage(); });

		function sendMessage(){
			const input=document.getElementById('messageInput');
			const message=input.value.trim();
			if(!message) return;
			connection.invoke('SendMessage',message).catch(err=>console.error(err.toString()));
			input.value=''; input.focus();
		}
	</script>
}


