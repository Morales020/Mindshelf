@{
    ViewData["Title"] = "الصفحة الرئيسية";
    ViewBag.BodyClass = "home-page";
}
@Html.AntiForgeryToken()

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="hero-content text-center">
            <h1 class="hero-title">مرحباً بكم في مكتبة MindShelf الرقمية</h1>
            <p class="hero-subtitle">اكتشف عالماً من المعرفة والثقافة من خلال آلاف الكتب المتنوعة</p>

            <!-- Enhanced Search -->
            <div class="hero-search mt-4">
                <div class="row justify-content-center">
                    <div class="col-lg-6">
                        <div class="hero-search-container">
                            <form asp-controller="Books" asp-action="Index" method="get">
                                <div class="input-group input-group-lg">
                                    <input type="text" name="searchTerm" class="form-control hero-search-input"
                                           placeholder="البحث عن كتاب أو تصنيف..."
                                           id="heroSearch">
                                    <button class="btn btn-primary" type="submit">
                                        <i class="fas fa-search"></i> بحث
                                    </button>
                                </div>
                            </form>
                            <div class="hero-search-suggestions" id="heroSearchSuggestions"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="hero-actions mt-4">
                <a href="@Url.Action("Index", "Books")" class="btn btn-primary me-3">
                    <i class="fas fa-book"></i> تصفح جميع الكتب
                </a>
                <a href="@Url.Action("Index", "Category")" class="btn btn-outline-primary">
                    <i class="fas fa-list"></i> التصنيفات
                </a>
            </div>
        </div>
    </div>
</section>

<!-- Stats Section -->
<section class="stats-section">
    <div class="container">
        <div class="row text-center">
            <div class="col-lg-3 col-md-6">
                <div class="stat-item">
                    <span class="stat-number" id="booksCount">1,250</span>
                    <div class="stat-label">كتاب متاح</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-item">
                    <span class="stat-number" id="authorsCount">320</span>
                    <div class="stat-label">مؤلف</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-item">
                    <span class="stat-number" id="usersCount">5,480</span>
                    <div class="stat-label">قارئ نشط</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-item">
                    <span class="stat-number" id="downloadsCount">12,650</span>
                    <div class="stat-label">تحميل هذا الشهر</div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Featured Books Section -->
<section class="featured-books py-5">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-star text-warning"></i>
                الأعلى تقييماً
            </h2>
            <p class="section-subtitle">أفضل الكتب بناءً على تقييمات القراء</p>
        </div>

        <div class="row" id="featuredBooks">
            @if (ViewBag.TopRatedBooks != null && ((IEnumerable<MindShelf_BL.Dtos.BookDto.BookResponseDto>)ViewBag.TopRatedBooks).Any())
            {
                @foreach (var book in (IEnumerable<MindShelf_BL.Dtos.BookDto.BookResponseDto>)ViewBag.TopRatedBooks)
                {
                    <div class="col-xl-3 col-lg-4 col-md-3 mb-3 col-8">
                        <div class="book-card text-center h-100">
                            <div class="position-relative">
                                <img src="@(string.IsNullOrEmpty(book.ImageUrl) ? "/Images/books/default.jpg" : book.ImageUrl)"
                                     alt="@book.Title" class="w-100 book-image-wrapper">
                                <span class="badge bg-warning position-absolute top-0 start-0 m-2">
                                    <i class="fas fa-star"></i> الأعلى تقييماً
                                </span>
                                <button type="button"
                                        class="btn btn-outline-danger btn-sm position-absolute favourite-btn"
                                        style="top: 10px; left: 10px;"
                                        data-book-id="@(book.BookId)"
                                        onclick="toggleFavourite(@(book.BookId), this)"
                                        title="إضافة للمفضلة">
                                    <i class="far fa-heart"></i>
                                </button>
                            </div>
                            <div class="book-info">
                                <h5 class="book-title">@book.Title</h5>
                                <p class="book-author">
                                    <i class="fas fa-user-edit me-1"></i>
                                    @book.AuthorName
                                </p>
                                <div class="book-rating">
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Math.Floor(book.Rating))
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else if (i == Math.Ceiling(book.Rating) && book.Rating % 1 != 0)
                                            {
                                                <i class="fas fa-star-half-alt"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                    <small class="text-muted">(@book.Rating.ToString("F1"))</small>
                                </div>
                                <div class="book-price">
                                    @if (book.Price == 0)
                                    {
                                        <strong class="text-success">مجاني</strong>
                                    }
                                    else
                                    {
                                        <strong class="text-primary">@book.Price.ToString("F2") ر.س</strong>
                                    }
                                </div>
                                <div class="d-grid gap-2">
                                    @if (book.Price == 0)
                                    {
                                        <a href="@Url.Action("Download", "Books", new { id = book.BookId })" class="btn btn-success btn-sm">
                                            <i class="fas fa-download"></i> تحميل مجاني
                                        </a>
                                    }
                                    else
                                    {
                                        @if (book.State == MindShelf_DAL.Models.BookState.Available)
                                        {
                                            <form asp-action="AddToCart" asp-controller="Cart" method="post">
                                                <input type="hidden" name="BookId" value="@(book.BookId)" />
                                                <input type="hidden" name="Quantity" value="1" />
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-primary btn-sm w-100">
                                                    <i class="fas fa-cart-plus me-1"></i> السلة
                                                </button>
                                            </form>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary btn-sm w-100" disabled>غير متوفر</button>
                                        }
                                    }
                                    <a href="@Url.Action("Details", "Books", new { id = book.BookId })" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-eye"></i> التفاصيل
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        لا توجد كتب متاحة حالياً
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-4">
            <a href="@Url.Action("Index", "Books")" class="btn btn-primary btn-lg">
                <i class="fas fa-book-open"></i> عرض جميع الكتب
            </a>
        </div>
    </div>
</section>

<!-- Categories Section -->
<section class="categories-section py-5 bg-light">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-list-ul text-primary"></i>
                التصنيفات الرئيسية
            </h2>
            <p class="section-subtitle">تصفح الكتب حسب الموضوع والاهتمام</p>
        </div>

        <div class="row">
            @if (ViewBag.Categories != null && ((IEnumerable<MindShelf_BL.Dtos.CategoryDto.CategoryResponseDto>)ViewBag.Categories).Any())
            {
                foreach (var category in (IEnumerable<MindShelf_BL.Dtos.CategoryDto.CategoryResponseDto>)ViewBag.Categories)
                {
                    <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                        <div class="category-card">
                            <div class="category-icon">
                                <i class="fas fa-tag"></i>
                            </div>
                            <h5 class="category-title">@category.Name</h5>
                            <div class="category-count">
                                <strong>@(category.Books?.Count ?? 0)</strong> كتاب متاح
                            </div>
                            <div class="category-actions mt-3">
                                <a href="@Url.Action("Details", "Category", new { id = category.CategoryId })"
                                   class="btn btn-primary btn-sm w-100">
                                    <i class="fas fa-info-circle"></i> عرض التفاصيل
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-info text-center">لا توجد تصنيفات متاحة حالياً</div>
                </div>
            }
        </div>

        <div class="text-center mt-4">
            <a href="@Url.Action("Index", "Category")" class="btn btn-outline-primary btn-lg">
                <i class="fas fa-list"></i> عرض جميع التصنيفات
            </a>
        </div>
    </div>
</section>

<!-- Popular Authors Section -->
<section class="popular-authors py-5">
    <div class="container">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-users text-brown"></i>
                المؤلفون المشهورون
            </h2>
            <p class="section-subtitle">تعرف على أبرز الكتاب والمؤلفين في مكتبتنا</p>
        </div>

        <div class="row">
            @if (ViewBag.PopularAuthors != null && ((IEnumerable<MindShelf_BL.Dtos.AuthorDto.AuthorResponseDto>)ViewBag.PopularAuthors).Any())
            {
                @foreach (var author in (IEnumerable<MindShelf_BL.Dtos.AuthorDto.AuthorResponseDto>)ViewBag.PopularAuthors)
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card author-card h-100">
                            <div class="card-body text-center">
                                <div class="author-image mb-3">
                                    @if (!string.IsNullOrEmpty(author.ImageUrl) && (author.ImageUrl.EndsWith("jpg", StringComparison.OrdinalIgnoreCase) || author.ImageUrl.EndsWith("jpeg", StringComparison.OrdinalIgnoreCase) || author.ImageUrl.EndsWith("png", StringComparison.OrdinalIgnoreCase) || author.ImageUrl.EndsWith("gif", StringComparison.OrdinalIgnoreCase) || author.ImageUrl.EndsWith("webp", StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <img src="@author.ImageUrl" alt="@author.Name"
                                             class="rounded-circle" width="80" height="80"
                                             style="object-fit: cover; border: 3px solid var(--primary-blue);">
                                    }
                                    else
                                    {
                                        <img src="/Images/anon-icon.jpg" alt="@author.Name"
                                             class="rounded-circle" width="80" height="80"
                                             style="object-fit: cover; border: 3px solid var(--primary-blue);">
                                    }
                                </div>
                                <h5 class="author-name text-primary mb-2">@author.Name</h5>
                                @if (!string.IsNullOrEmpty(author.Bio))
                                {
                                    <p class="author-bio text-muted mb-3">
                                        @(author.Bio.Length > 100 ? author.Bio.Substring(0, 100) + "..." : author.Bio)
                                    </p>
                                }
                                <div class="author-stats mb-3">
                                    <div class="row text-center">
                                        <div class="col-6">
                                            <strong class="text-brown">@author.bookcount</strong>
                                            <br><small class="text-muted">كتاب</small>
                                        </div>
                                        <div class="col-6">
                                            <strong class="text-brown">@author.ReviewsCount</strong>
                                            <br><small class="text-muted">مراجعة</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="author-actions">
                                    <a href="@Url.Action("Details", "Author", new { id = author.AuthorId })" class="btn btn-primary btn-sm">
                                        <i class="fas fa-user"></i> الملف الشخصي
                                    </a>
                                    <a href="@Url.Action("Details", "Author", new { id = author.AuthorId })#Link" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-books"></i> كتب المؤلف
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        لا توجد مؤلفين متاحين حالياً
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-4">
            <a href="@Url.Action("Index", "Author")" class="btn btn-outline-primary btn-lg">
                <i class="fas fa-users"></i> عرض جميع المؤلفين
            </a>
        </div>
    </div>
</section>

<!-- Upcoming Events Section -->
<section class="upcoming-events py-5">
    <div class="container">
        <div class="section-header text-center mb-5">
            <h2 class="section-title">
                <i class="fas fa-calendar-check text-primary"></i>
                الفعاليات القادمة
            </h2>
            <p class="section-subtitle">انضم إلينا في فعالياتنا الثقافية والأدبية</p>
        </div>

        <div class="row g-4">
            @if (ViewBag.UpcomingEvents != null && ((IEnumerable<MindShelf_BL.Dtos.EventDtos.EventResponseDto>)ViewBag.UpcomingEvents).Any())
            {
                @foreach (var ev in (IEnumerable<MindShelf_BL.Dtos.EventDtos.EventResponseDto>)ViewBag.UpcomingEvents)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="home-event-card">
                            <div class="event-card-header">
                                <div class="event-date-badge">
                                    <div class="date-day">@ev.StartingDate.Day</div>
                                    <div class="date-month">@ev.StartingDate.ToString("MMM", new System.Globalization.CultureInfo("ar-EG"))</div>
                                </div>
                                <div class="event-status-badge @(ev.IsOnline ? "online" : "offline")">
                                    <i class="fas @(ev.IsOnline ? "fa-video" : "fa-building")"></i>
                                    @(ev.IsOnline ? "أونلاين" : "حضوري")
                                </div>
                            </div>
                            
                            <div class="event-card-body">
                                <h5 class="event-title">@ev.Title</h5>
                                @if (!string.IsNullOrEmpty(ev.Description))
                                {
                                    <p class="event-description">
                                        @(ev.Description.Length > 120 ? ev.Description.Substring(0, 120) + "..." : ev.Description)
                                    </p>
                                }
                                
                                <div class="event-meta">
                                    <div class="event-meta-item">
                                        <i class="fas fa-clock"></i>
                                        <span>@ev.StartingDate.ToString("HH:mm", new System.Globalization.CultureInfo("ar-EG"))</span>
                                    </div>
                                    <div class="event-meta-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <span>@ev.Location</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="event-card-footer">
                                <a href="@Url.Action("Details", "Event", new { id = ev.EventId })" class="btn btn-details">
                                    <i class="fas fa-info-circle"></i>
                                    التفاصيل
                                </a>
                                @if (ev.IsActive)
                                {
                                    var userId = ViewBag.CurrentUserId as string;
                                    var isRegistered = userId != null && ev.Registrations.Any(r => r.UserId == userId);
                                    <form method="post" asp-controller="Event" asp-action="RegisterForEvent" class="d-inline register-form" data-event-id="@ev.EventId">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="EventId" value="@ev.EventId" />
                                    </form>
                                    <button class="btn btn-register register-btn @(isRegistered ? "registered" : "")" data-event-id="@ev.EventId" data-registered="@isRegistered.ToString().ToLower()">
                                        <i class="fas @(isRegistered ? "fa-times" : "fa-calendar-plus")"></i>
                                        @(isRegistered ? "إلغاء التسجيل" : "تسجيل الحضور")
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-register" disabled>
                                        <i class="fas fa-times-circle"></i>
                                        منتهي
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <div class="no-events-message">
                        <i class="fas fa-calendar-times text-muted mb-3" style="font-size: 3rem;"></i>
                        <h4 class="text-muted">لا توجد فعاليات متاحة حالياً</h4>
                        <p class="text-muted">تابعنا لمعرفة آخر الفعاليات والأحداث</p>
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-5">
            <a href="@Url.Action("Index", "Event")" class="btn btn-primary btn-lg">
                <i class="fas fa-calendar-alt"></i> عرض جميع الفعاليات
            </a>
        </div>
    </div>
</section>

<style>
    /* Home Events Section Styles */
    .upcoming-events {
        background: var(--light-color);
        position: relative;
    }

    .home-event-card {
        background: var(--card-bg);
        border-radius: 16px;
        box-shadow: var(--shadow-md);
        border: 1px solid var(--border-color);
        overflow: hidden;
        transition: var(--transition);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .home-event-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-lg);
    }

    .event-card-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
    }

    .event-card-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        opacity: 0.3;
    }

    .event-date-badge {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 0.75rem 1rem;
        text-align: center;
        color: white;
        position: relative;
        z-index: 2;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .date-day {
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1;
    }

    .date-month {
        font-size: 0.85rem;
        font-weight: 500;
        margin-top: 0.25rem;
    }

    .event-status-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        z-index: 2;
    }

    .event-status-badge.online {
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .event-status-badge.offline {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        border: 1px solid rgba(59, 130, 246, 0.3);
    }

    .event-card-body {
        padding: 1.5rem;
        flex: 1;
    }

    .event-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        line-height: 1.3;
    }

    .event-description {
        color: var(--text-muted);
        font-size: 0.95rem;
        line-height: 1.6;
        margin-bottom: 1rem;
    }

    .event-meta {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .event-meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-muted);
        font-size: 0.9rem;
    }

    .book-image-wrapper {
        height: 250px;
        width: 100%;
        object-fit: Cover;
        background-color: #f8f9fa;
    }

    .book-image {
        height: 250px;
        width: 100%;
        object-fit: contain;
        background-color: #f8f9fa;
    }

    .event-meta-item i {
        width: 16px;
        color: var(--primary-color);
    }

    .event-card-footer {
        padding: 1rem 1.5rem;
        background: var(--light-color);
        border-top: 1px solid var(--border-color);
        display: flex;
        gap: 0.75rem;
    }

    .btn-details {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
        transition: var(--transition);
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-details:hover {
        background: var(--primary-dark);
        transform: translateY(-1px);
    }

    .btn-register {
        background: #10b981;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
        transition: var(--transition);
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-register:hover:not(:disabled) {
        background: #059669;
        transform: translateY(-1px);
    }

    .btn-register:disabled {
        background: #6b7280;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .no-events-message {
        padding: 3rem 2rem;
        background: var(--card-bg);
        border-radius: 16px;
        border: 1px solid var(--border-color);
    }

    /* Dark Mode Styles */
    body.dark-mode .upcoming-events {
        background: var(--dark-bg);
    }

    body.dark-mode .home-event-card {
        background: var(--dark-card-bg);
        border-color: var(--dark-border-color);
    }

    body.dark-mode .event-title {
        color: var(--dark-text-primary);
    }

    body.dark-mode .event-description {
        color: #b0b0b0;
    }

    body.dark-mode .event-meta-item {
        color: #b0b0b0;
    }

    body.dark-mode .event-card-footer {
        background: var(--dark-border-color);
        border-color: var(--dark-border-color);
    }

    body.dark-mode .no-events-message {
        background: var(--dark-card-bg);
        border-color: var(--dark-border-color);
    }

    body.dark-mode .no-events-message h4 {
        color: var(--dark-text-primary);
    }

    body.dark-mode .no-events-message p {
        color: #b0b0b0;
    }

    /* Hero Search Suggestions */
    .hero-section {
        position: relative;
        z-index: auto; /* keep default so it doesn't cover navbar dropdowns */
    }

    .stats-section {
        position: relative;
        z-index: 1;
    }

    .hero-search-container {
        position: relative;
        width: 100%;
        z-index: 2500;
        transition: margin-bottom 0.25s ease;
    }

    .hero-search-container.open {
        margin-bottom: 320px;
    }

    .hero-search-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-top: none;
        border-radius: 0 0 12px 12px;
        box-shadow: var(--shadow-lg);
        max-height: 400px;
        overflow-y: auto;
        z-index: 3000;
        display: none;
    }

    .hero-search-suggestion-item {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 1rem;
        position: relative;
        overflow: hidden;
    }

    .hero-search-suggestion-item:hover {
        background: var(--light-color);
        transform: translateX(5px);
    }

    .hero-search-suggestion-item:last-child {
        border-bottom: none;
    }

    .hero-search-suggestion-item::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .hero-search-suggestion-item:hover::before {
        transform: scaleY(1);
    }

    .hero-search-book-image-container {
        width: 50px;
        height: 65px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        transition: var(--transition);
        flex-shrink: 0;
    }

    .hero-search-book-image-container:hover {
        transform: scale(1.05);
        box-shadow: var(--shadow-md);
    }

    .hero-search-book-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: var(--transition);
    }

    .hero-search-book-image:hover {
        transform: scale(1.1);
    }

    .hero-search-content {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        text-align: left;
    }

    .hero-search-title {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 250px;
        direction: ltr;
        text-align: left;
        font-size: 0.95rem;
    }

    .hero-search-author {
        font-size: 0.9rem;
        color: var(--text-muted);
        margin-bottom: 0.25rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
        direction: ltr;
        text-align: left;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .hero-search-author::before {
        content: '\f007';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        font-size: 0.8rem;
        color: var(--text-muted);
    }

    .hero-search-price {
        font-size: 0.85rem;
        margin-top: 0.25rem;
        font-weight: 600;
        color: var(--success-color);
        text-align: left;
    }

    .hero-search-arrow {
        color: var(--text-muted);
        transition: var(--transition);
        flex-shrink: 0;
    }

    .hero-search-suggestion-item:hover .hero-search-arrow {
        color: var(--primary-color);
        transform: translateX(5px);
    }

    /* Dark Mode for Hero Search */
    body.dark-mode .hero-search-suggestions {
        background: var(--dark-card-bg);
        border-color: var(--dark-border-color);
    }

    body.dark-mode .hero-search-suggestion-item {
        border-color: var(--dark-border-color);
    }

    body.dark-mode .hero-search-suggestion-item:hover {
        background: var(--dark-bg);
    }

    body.dark-mode .hero-search-title {
        color: var(--dark-text-primary);
    }

    body.dark-mode .hero-search-author {
        color: #b0b0b0;
    }

    body.dark-mode .hero-search-price {
        color: #10b981;
    }

    body.dark-mode .hero-search-arrow {
        color: #b0b0b0;
    }

    body.dark-mode .hero-search-suggestion-item:hover .hero-search-arrow {
        color: var(--primary-color);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .event-card-header {
            padding: 1rem;
        }

        .event-card-body {
            padding: 1rem;
        }

        .event-card-footer {
            padding: 1rem;
            flex-direction: column;
        }

        .btn-details,
        .btn-register {
            width: 100%;
        }

        .hero-search-title,
        .hero-search-author {
            max-width: 150px;
        }
        .hero-search-container.open {
            margin-bottom: 260px;
        }
    }
</style>


@section Scripts {
    <script>
        // تحريك الإحصائيات
        document.addEventListener('DOMContentLoaded', function() {
            animateStats();
            initializeHeroSearch();
        });

        function animateStats() {
            const stats = [
                { element: 'booksCount', target: 1250, suffix: '' },
                { element: 'authorsCount', target: 320, suffix: '' },
                { element: 'usersCount', target: 5480, suffix: '' },
                { element: 'downloadsCount', target: 12650, suffix: '' }
            ];

            stats.forEach(stat => {
                animateNumber(stat.element, stat.target, stat.suffix);
            });
        }

        function animateNumber(elementId, target, suffix) {
            const element = document.getElementById(elementId);
            if (!element) return;

            let current = 0;
            const increment = target / 50;
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    element.textContent = target.toLocaleString('ar-SA') + suffix;
                    clearInterval(timer);
                } else {
                    element.textContent = Math.floor(current).toLocaleString('ar-SA') + suffix;
                }
            }, 50);
        }

        // Add to Favourite function
        function toggleFavourite(bookId, btn) {
            // Check if user is logged in
            @if (!User.Identity?.IsAuthenticated == true)
            {
                <text>
                alert('يجب تسجيل الدخول لإضافة كتاب للمفضلة');
                window.location.href = '@Url.Action("Login", "Account")';
                return;
                </text>
            }

            var token = $('input[name="__RequestVerificationToken"]').val();
            
            // Disable button to prevent multiple clicks
            $(btn).prop('disabled', true);
            
            // Show loading state
            var originalIcon = $(btn).find('i').attr('class');
            $(btn).find('i').removeClass().addClass('fas fa-spinner fa-spin');

            $.ajax({
                url: '@Url.Action("ToggleFavourite", "FavouriteBook")',
                type: 'POST',
                data: { 
                    bookId: bookId, 
                    __RequestVerificationToken: token 
                },
                success: function(response) {
                    if (response.success) {
                        if (response.isFavourited) {
                            // Book is now favourited
                            $(btn).find('i').removeClass().addClass('fas fa-heart');
                            $(btn).removeClass('btn-outline-danger').addClass('btn-danger');
                            $(btn).attr('title', 'في المفضلة');
                        } else {
                            // Book is no longer favourited
                            $(btn).find('i').removeClass().addClass('far fa-heart');
                            $(btn).removeClass('btn-danger').addClass('btn-outline-danger');
                            $(btn).attr('title', 'إضافة للمفضلة');
                        }
                        
                        // Success - no message needed
                    } else {
                        // Restore original state on error
                        $(btn).find('i').removeClass().addClass(originalIcon);
                        alert(response.message);
                        
                        if (response.redirect) {
                            setTimeout(() => {
                                window.location.href = response.redirect;
                            }, 2000);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    // Restore original state
                    $(btn).find('i').removeClass().addClass(originalIcon);
                    $(btn).prop('disabled', false);
                    
                    // Show error message
                    if (xhr.status === 401) {
                        alert('يجب تسجيل الدخول لإضافة كتاب للمفضلة');
                        setTimeout(() => {
                            window.location.href = '@Url.Action("Login", "Account")';
                        }, 2000);
                    } else {
                        alert('حدث خطأ أثناء تحديث المفضلة');
                    }
                },
                complete: function() {
                    // Re-enable button
                    $(btn).prop('disabled', false);
                }
            });
        }

        // Event registration (home cards) same as events index
        document.addEventListener('DOMContentLoaded', function() {
            const isLoggedIn = @(ViewBag.IsLoggedIn == true ? "true" : "false");
            document.querySelectorAll('.register-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    if (!isLoggedIn) {
                        window.location.href = '/Account/Login';
                        return;
                    }
                    const eventId = this.getAttribute('data-event-id');
                    const isRegistered = this.getAttribute('data-registered') === 'true';
                    if (!eventId) return;

                    const form = document.querySelector(`form.register-form[data-event-id="${eventId}"]`);
                    const token = form?.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    
                    const endpoint = isRegistered ? '/Event/CancelRegistrationAjax' : '/Event/RegisterForEventAjax';
                    const res = await fetch(endpoint, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token || '' },
                        body: JSON.stringify({ eventId: parseInt(eventId) })
                    });
                    if (res.ok) {
                        if (isRegistered) {
                            // Cancel registration
                            this.classList.remove('registered');
                            this.setAttribute('data-registered', 'false');
                            this.innerHTML = '<i class="fas fa-calendar-plus"></i>تسجيل الحضور';
                            // Update participant count
                            updateHomeParticipantCount(eventId, -1);
                        } else {
                            // Register
                            this.classList.add('registered');
                            this.setAttribute('data-registered', 'true');
                            this.innerHTML = '<i class="fas fa-times"></i>إلغاء التسجيل';
                            // Update participant count
                            updateHomeParticipantCount(eventId, 1);
                        }
                    } else {
                        const txt = await res.text();
                        alert('تعذر إتمام العملية: ' + txt);
                    }
                });
            });

            // Function to update participant count on home page
            function updateHomeParticipantCount(eventId, change) {
                const eventCard = document.querySelector(`[data-event-id="${eventId}"]`).closest('.home-event-card');
                // Home page doesn't show participant count, so we'll skip this for now
                // But we can add it later if needed
            }
        });

        // Check favourite status on page load
        $(document).ready(function() {
            $('.favourite-btn').each(function() {
                var btn = $(this);
                var bookId = btn.data('book-id');
                
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <text>
                    $.ajax({
                        url: '@Url.Action("CheckFavouriteStatus", "FavouriteBook")',
                        type: 'GET',
                        data: { bookId: bookId },
                        success: function(response) {
                            if (response.isFavourited) {
                                btn.find('i').removeClass().addClass('fas fa-heart');
                                btn.removeClass('btn-outline-danger').addClass('btn-danger');
                                btn.attr('title', 'في المفضلة');
                            }
                        }
                    });
                    </text>
                }
            });
        });

        // Hero Search Functionality
        let heroAllBooksCache = [];
        let heroSearchTimeout;

        function initializeHeroSearch() {
            const heroSearchInput = document.getElementById('heroSearch');
            const heroSearchSuggestions = document.getElementById('heroSearchSuggestions');
            
            if (!heroSearchInput || !heroSearchSuggestions) return;

            // Load all books for instant search
            loadHeroAllBooks();

            // Add input event listener
            heroSearchInput.addEventListener('input', function() {
                const query = this.value.trim();
                
                if (query.length < 1) {
                    heroSearchSuggestions.style.display = 'none';
                    document.querySelector('.hero-search-container')?.classList.remove('open');
                    return;
                }

                // Clear previous timeout
                if (heroSearchTimeout) {
                    clearTimeout(heroSearchTimeout);
                }

                // Set new timeout for search
                heroSearchTimeout = setTimeout(() => {
                    performHeroSearch(query);
                }, 150);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!heroSearchInput.contains(e.target) && !heroSearchSuggestions.contains(e.target)) {
                    heroSearchSuggestions.style.display = 'none';
                    document.querySelector('.hero-search-container')?.classList.remove('open');
                }
            });

            // Handle suggestion clicks
            heroSearchSuggestions.addEventListener('click', function(e) {
                const suggestionItem = e.target.closest('.hero-search-suggestion-item');
                if (suggestionItem) {
                    const bookId = suggestionItem.getAttribute('data-book-id');
                    if (bookId) {
                        window.location.href = `/Books/Details/${bookId}`;
                    }
                }
            });
        }

        function loadHeroAllBooks() {
            console.log('Hero search: Loading all books...');
            fetch('/Books/Index')
                .then(response => {
                    console.log('Hero search: Response status:', response.status);
                    return response.text();
                })
                .then(html => {
                    console.log('Hero search: HTML length:', html.length);
                    console.log('Hero search: HTML preview:', html.substring(0, 500));
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const bookCards = doc.querySelectorAll('.book-card');
                    console.log('Hero search: Found', bookCards.length, 'book cards');
                    
                    // If no .book-card found, try alternative selectors
                    if (bookCards.length === 0) {
                        const altCards = doc.querySelectorAll('.card, [data-book-id], [onclick*="viewBookDetails"]');
                        console.log('Hero search: Found', altCards.length, 'alternative cards');
                        if (altCards.length > 0) {
                            console.log('Hero search: First alternative card:', altCards[0].outerHTML.substring(0, 200));
                        }
                    }
                    
                    heroAllBooksCache = [];
                    
                    bookCards.forEach((card, index) => {
                        console.log(`Hero search: Processing card ${index}:`, card);
                        
                        // Try multiple selectors for title
                        const titleElement = card.querySelector('.card-title, h5, h6, .fw-bold');
                        const authorElement = card.querySelector('.text-muted, small');
                        const imageElement = card.querySelector('img');
                        const priceElement = card.querySelector('.h6.text-success.fw-bold, .text-success, .price, .text-primary');
                        
                        console.log('Hero search: Elements found:', {
                            titleElement: titleElement?.textContent?.trim(),
                            authorElement: authorElement?.textContent?.trim(),
                            imageElement: imageElement?.src,
                            priceElement: priceElement?.textContent?.trim()
                        });
                        
                        // Try multiple ways to get the book id
                        const bookIdFromData = card.getAttribute('data-book-id');
                        const onclickElement = card.querySelector('[onclick*="viewBookDetails"]');
                        const onclickAttr = onclickElement ? onclickElement.getAttribute('onclick') : null;
                        const bookIdFromOnclick = onclickAttr ? (onclickAttr.match(/viewBookDetails\((\d+)\)/)?.[1] || null) : null;
                        
                        if (titleElement) {
                            const title = titleElement.textContent.trim();
                            const author = authorElement ? authorElement.textContent.trim() : 'غير محدد';
                            const imageUrl = imageElement ? imageElement.src : null;
                            
                            // Better price extraction - look for price patterns
                            let price = null;
                            if (priceElement) {
                                const priceText = priceElement.textContent.trim();
                                console.log('Hero search: Price element text:', priceText);
                                // Check if it looks like a price (contains numbers and currency)
                                if (priceText.match(/\d+/) && (priceText.includes('ر.س') || priceText.includes('جنيه') || priceText.includes('$') || priceText.includes('£') || priceText.includes('مجاناً'))) {
                                    price = priceText;
                                }
                            }
                            
                            // If no price found, try to find it in other elements
                            if (!price) {
                                const allTextElements = card.querySelectorAll('*');
                                for (let elem of allTextElements) {
                                    const text = elem.textContent.trim();
                                    if (text.match(/\d+/) && (text.includes('ر.س') || text.includes('جنيه') || text.includes('$') || text.includes('£') || text.includes('مجاناً'))) {
                                        price = text;
                                        console.log('Hero search: Found price in fallback:', price);
                                        break;
                                    }
                                }
                            }
                            
                            console.log('Hero search: Final extracted data:', {
                                title,
                                author,
                                imageUrl,
                                price,
                                bookId: bookIdFromData || bookIdFromOnclick
                            });
                            
                            // Prefer data attribute; fallback to onclick()
                            const bookId = bookIdFromData || bookIdFromOnclick;
                            if (!bookId) {
                                console.log('Hero search: Skipping card - no bookId found', {
                                    bookIdFromData,
                                    onclickAttr
                                });
                            }
                            
                            if (bookId) {
                                heroAllBooksCache.push({
                                    type: 'book',
                                    title: title,
                                    author: author,
                                    bookId: bookId,
                                    imageUrl: imageUrl,
                                    price: price
                                });
                            }
                        }
                    });
                    
                    console.log('Hero search: Loaded', heroAllBooksCache.length, 'books');
                    console.log('Hero search: Sample books:', heroAllBooksCache.slice(0, 3).map(b => ({ title: b.title, author: b.author })));
                })
                .catch(error => {
                    console.error('Hero search: Error loading books:', error);
                });
        }

        function performHeroSearch(query) {
            const heroSearchSuggestions = document.getElementById('heroSearchSuggestions');
            
            console.log('Hero search: Searching for:', query);
            console.log('Hero search: Cache has', heroAllBooksCache.length, 'books');
            
            if (!query || query.length < 1) {
                heroSearchSuggestions.style.display = 'none';
                return;
            }

            // Filter cached books
            const filteredBooks = heroAllBooksCache.filter(book => {
                const titleMatch = book.title.toLowerCase().includes(query.toLowerCase());
                const authorMatch = book.author.toLowerCase().includes(query.toLowerCase());
                console.log(`Hero search: Book "${book.title}" - Title match: ${titleMatch}, Author match: ${authorMatch}`);
                return titleMatch || authorMatch;
            });

            console.log('Hero search: Filtered results:', filteredBooks.length);
            displayHeroSuggestions(filteredBooks);
        }

        function displayHeroSuggestions(suggestions) {
            const heroSearchSuggestions = document.getElementById('heroSearchSuggestions');
            
            if (!suggestions || suggestions.length === 0) {
                heroSearchSuggestions.innerHTML = '<div class="hero-search-suggestion-item"><div class="text-center text-muted py-3">لا توجد نتائج</div></div>';
                heroSearchSuggestions.style.display = 'block';
                return;
            }

            const html = suggestions.slice(0, 5).map(item => {
                const bookImage = item.imageUrl || '/Images/books/default.jpg';
                return `
                    <div class="hero-search-suggestion-item" data-book-id="${item.bookId}">
                        <div class="hero-search-book-image-container">
                            <img src="${bookImage}" alt="${item.title}" class="hero-search-book-image" 
                                 onerror="this.src='/Images/books/default.jpg'">
                        </div>
                        <div class="hero-search-content">
                            <div class="hero-search-title">${item.title}</div>
                            <div class="hero-search-author">${item.author}</div>
                            <div class="hero-search-price text-success fw-bold">
                                ${item.price && item.price.trim() ? item.price : 'السعر غير متوفر'}
                            </div>
                        </div>
                        <div class="hero-search-arrow">
                            <i class="fas fa-arrow-left"></i>
                        </div>
                    </div>
                `;
            }).join('');

            heroSearchSuggestions.innerHTML = html;
            heroSearchSuggestions.style.display = 'block';
            document.querySelector('.hero-search-container')?.classList.add('open');
        }
    </script>

}
